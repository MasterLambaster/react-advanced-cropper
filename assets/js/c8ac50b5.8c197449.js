"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4048],{3905:function(e,t,n){n.d(t,{Zo:function(){return c},kt:function(){return m}});var a=n(7294);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var l=a.createContext({}),p=function(e){var t=a.useContext(l),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},c=function(e){var t=p(e.components);return a.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,l=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(n),m=i,h=d["".concat(l,".").concat(m)]||d[m]||u[m]||r;return n?a.createElement(h,o(o({ref:t},c),{},{components:n})):a.createElement(h,o({ref:t},c))}));function m(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=d;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var p=2;p<r;p++)o[p]=n[p];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},715:function(e,t,n){n.r(t),n.d(t,{frontMatter:function(){return s},contentTitle:function(){return l},metadata:function(){return p},toc:function(){return c},default:function(){return d}});var a=n(7462),i=n(3366),r=(n(7294),n(3905)),o=["components"],s={title:"Basic",sidebar_position:1},l="Basic",p={unversionedId:"concept/basic",id:"concept/basic",isDocsHomePage:!1,title:"Basic",description:"State",source:"@site/docs/concept/basic.md",sourceDirName:"concept",slug:"/concept/basic",permalink:"/react-advanced-cropper/docs/concept/basic",editUrl:"https://github.com/facebook/docusaurus/edit/main/website/docs/concept/basic.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Basic",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Getting started",permalink:"/react-advanced-cropper/docs/intro"},next:{title:"Modifiers",permalink:"/react-advanced-cropper/docs/concept/modifiers"}},c=[{value:"State",id:"state",children:[{value:"Boundary",id:"boundary",children:[]},{value:"Image size",id:"image-size",children:[]},{value:"Visible area",id:"visible-area",children:[]},{value:"Coordinates",id:"coordinates",children:[]},{value:"Transforms",id:"transforms",children:[]}]},{value:"State Modifiers",id:"state-modifiers",children:[]},{value:"Settings",id:"settings",children:[]},{value:"Image",id:"image",children:[]},{value:"Transitions",id:"transitions",children:[]}],u={toc:c};function d(e){var t=e.components,n=(0,i.Z)(e,o);return(0,r.kt)("wrapper",(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"basic"},"Basic"),(0,r.kt)("h2",{id:"state"},"State"),(0,r.kt)("p",null,"The basic concept of this library is ",(0,r.kt)("strong",{parentName:"p"},"the cropper state"),".\nDespite a bunch of components and hooks that this library provided to you, they are just the way to modify the state and display it to the user."),(0,r.kt)("p",null,"The state consists of five components: boundary, image size, visible area, coordinates and transforms."),(0,r.kt)("p",null,"Technically, it's the object with the following interface:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface CropperState {\n    boundary: Boundary;\n    imageSize: ImageSize;\n    transforms: Transforms;\n    visibleArea: VisibleArea | null;\n    coordinates: Coordinates | null;\n}\n")),(0,r.kt)("p",null,"There is the additional agreement that state can be ",(0,r.kt)("inlineCode",{parentName:"p"},"null"),", if it's not initialized yet."),(0,r.kt)("h3",{id:"boundary"},"Boundary"),(0,r.kt)("p",null,"The boundary is the physical size of the cropper in pixels."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Boundary {\n    width: number;\n    height: number;\n}\n")),(0,r.kt)("h3",{id:"image-size"},"Image size"),(0,r.kt)("p",null,"The image size is the natural image size."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface ImageSize {\n    width: number;\n    height: number;\n}\n")),(0,r.kt)("p",null,"The ratio of an image width and a boundary width (it can be height alike) plays the important role, because it defines\nthe ratio between physical cropper size and the internal coordinates sizes. For example, it's used in the event's normalization, because depending on this ratio moving the stencil on 1 pixel\ncan result in the moving of the coordinates on 0.5 pixels, 2 pixels, 3 pixels."),(0,r.kt)("h3",{id:"visible-area"},"Visible area"),(0,r.kt)("p",null,"The visible area is the part of an image that displayed to an user."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface VisibleArea {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n")),(0,r.kt)("p",null,"Due its nature its aspect ratio should be equal to the aspect ratio of boundary."),(0,r.kt)("h3",{id:"coordinates"},"Coordinates"),(0,r.kt)("p",null,"The coordinates represent the cropped part of an image."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Coordinates {\n    top: number;\n    left: number;\n    width: number;\n    height: number;\n}\n")),(0,r.kt)("h3",{id:"transforms"},"Transforms"),(0,r.kt)("p",null,"The transforms define the applied to an image transforms."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-ts"},"interface Transforms {\n    rotate: number;\n    flip: {\n        horizontal: boolean;\n        vertical: boolean;\n    };\n}\n")),(0,r.kt)("p",null,"They can include flip (horizontal , vertical) and rotate."),(0,r.kt)("h2",{id:"state-modifiers"},"State Modifiers"),(0,r.kt)("p",null,"The state is useless itself. It just a bunch of data. To make it useful there are plenty of different\n",(0,r.kt)("a",{parentName:"p",href:"/state/modifiers.html"},"modifiers"),":"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"transform image"),(0,r.kt)("li",{parentName:"ul"},"flip image"),(0,r.kt)("li",{parentName:"ul"},"rotate image"),(0,r.kt)("li",{parentName:"ul"},"set boundary"),(0,r.kt)("li",{parentName:"ul"},"set coordinates"),(0,r.kt)("li",{parentName:"ul"},"set visible area"),(0,r.kt)("li",{parentName:"ul"},"move coordinates"),(0,r.kt)("li",{parentName:"ul"},"resize coordinates")),(0,r.kt)("p",null,"They are ",(0,r.kt)("a",{parentName:"p",href:"https://en.wikipedia.org/wiki/Pure_function"},"pure functions")," that receives the ",(0,r.kt)("inlineCode",{parentName:"p"},"state")," and the cropper ",(0,r.kt)("inlineCode",{parentName:"p"},"settings")," and\nreturn the new ",(0,r.kt)("inlineCode",{parentName:"p"},"state")," value."),(0,r.kt)("p",null,"Also, there are two auxiliary functions: ",(0,r.kt)("a",{parentName:"p",href:"/docs/concept/modifiers/#createstate"},(0,r.kt)("inlineCode",{parentName:"a"},"createState"))," and ",(0,r.kt)("a",{parentName:"p",href:"/docs/concept/modifiers/#copystate"},(0,r.kt)("inlineCode",{parentName:"a"},"copyState"))," that in some sense similar to modifiers."),(0,r.kt)("h2",{id:"settings"},"Settings"),(0,r.kt)("p",null,"To use  ",(0,r.kt)("a",{parentName:"p",href:"/state/modifiers.html"},"the default modifiers")," described above you should define ",(0,r.kt)("inlineCode",{parentName:"p"},"settings")," before.\nThis object may be considered as props in a some component framework."),(0,r.kt)("p",null,"The settings are the most basic constraints that applies to the state, they includes:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"default coordinates"),(0,r.kt)("li",{parentName:"ul"},"default visible area"),(0,r.kt)("li",{parentName:"ul"},"area position restrictions"),(0,r.kt)("li",{parentName:"ul"},"area size restrictions"),(0,r.kt)("li",{parentName:"ul"},"size restrictions"),(0,r.kt)("li",{parentName:"ul"},"positions restrictions"),(0,r.kt)("li",{parentName:"ul"},"aspect ratio")),(0,r.kt)("p",null,"By defining this settings in different ways you can create a lot of different cropper behaviors without even creating your own\nmodifiers. However, it's pretty complicated to define them all on your own, so this library provides special\nfunction ",(0,r.kt)("inlineCode",{parentName:"p"},"withDefaults")," that add to  an object all that methods. It's described in ",(0,r.kt)("a",{parentName:"p",href:"/state/defaults.html"},"the corresponding section"),"."),(0,r.kt)("h2",{id:"image"},"Image"),(0,r.kt)("p",null,"Image is the another basic concept of this library. According to the convention it should have ",(0,r.kt)("inlineCode",{parentName:"p"},"CropperImage")," type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"interface CropperImage {\n    src: string;\n    revoke: boolean;\n    transforms: Transforms;\n    arrayBuffer: ArrayBuffer | null;\n    width: number;\n    height: number;\n}\n")),(0,r.kt)("p",null,"The meaning of the fields are the following:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"src")," - the link to the image"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"width")," - the image width"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"height")," - the image height"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"transforms")," - the transforms applied to the image"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"revoke")," - flag that indicates should be the image revoked (by ",(0,r.kt)("inlineCode",{parentName:"li"},"window/revokeObjectURL"),")"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("inlineCode",{parentName:"li"},"arrayBuffer")," - the content of the image in bytes")),(0,r.kt)("p",null,"Usually, it's gotten by ",(0,r.kt)("inlineCode",{parentName:"p"},"loadImage")," function."),(0,r.kt)("h2",{id:"transitions"},"Transitions"),(0,r.kt)("p",null,"Transitions is the object describes the current transitions.\nAccording to the convention it should have ",(0,r.kt)("inlineCode",{parentName:"p"},"CropperTransitions")," type:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-tsx"},"interface CropperTransitions {\n    timingFunction: string;\n    duration: number;\n    active: boolean;\n}\n")))}d.isMDXComponent=!0}}]);